// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apischaosv1alpha1 "github.com/spotahome/kooper/examples/pod-terminator-operator/v2/apis/chaos/v1alpha1"
	versioned "github.com/spotahome/kooper/examples/pod-terminator-operator/v2/client/k8s/clientset/versioned"
	internalinterfaces "github.com/spotahome/kooper/examples/pod-terminator-operator/v2/client/k8s/informers/externalversions/internalinterfaces"
	chaosv1alpha1 "github.com/spotahome/kooper/examples/pod-terminator-operator/v2/client/k8s/listers/chaos/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// PodTerminatorInformer provides access to a shared informer and lister for
// PodTerminators.
type PodTerminatorInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() chaosv1alpha1.PodTerminatorLister
}

type podTerminatorInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewPodTerminatorInformer constructs a new informer for PodTerminator type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPodTerminatorInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredPodTerminatorInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPodTerminatorInformer constructs a new informer for PodTerminator type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPodTerminatorInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ChaosV1alpha1().PodTerminators().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ChaosV1alpha1().PodTerminators().Watch(context.Background(), options)
			},
			ListWithContextFunc: func(ctx context.Context, options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ChaosV1alpha1().PodTerminators().List(ctx, options)
			},
			WatchFuncWithContext: func(ctx context.Context, options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ChaosV1alpha1().PodTerminators().Watch(ctx, options)
			},
		},
		&apischaosv1alpha1.PodTerminator{},
		resyncPeriod,
		indexers,
	)
}

func (f *podTerminatorInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredPodTerminatorInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *podTerminatorInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apischaosv1alpha1.PodTerminator{}, f.defaultInformer)
}

func (f *podTerminatorInformer) Lister() chaosv1alpha1.PodTerminatorLister {
	return chaosv1alpha1.NewPodTerminatorLister(f.Informer().GetIndexer())
}
