// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controllermock

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/runtime"
)

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type Handler
func (_mock *Handler) Handle(context1 context.Context, object runtime.Object) error {
	ret := _mock.Called(context1, object)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtime.Object) error); ok {
		r0 = returnFunc(context1, object)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Handler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Handler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - context1
//   - object
func (_e *Handler_Expecter) Handle(context1 interface{}, object interface{}) *Handler_Handle_Call {
	return &Handler_Handle_Call{Call: _e.mock.On("Handle", context1, object)}
}

func (_c *Handler_Handle_Call) Run(run func(context1 context.Context, object runtime.Object)) *Handler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(runtime.Object))
	})
	return _c
}

func (_c *Handler_Handle_Call) Return(err error) *Handler_Handle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Handler_Handle_Call) RunAndReturn(run func(context1 context.Context, object runtime.Object) error) *Handler_Handle_Call {
	_c.Call.Return(run)
	return _c
}
